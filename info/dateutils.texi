\input texinfo  @c -*-texinfo-*-
@setfilename dateutils.info
@comment  node-name,  next,  previous,  up

@ifinfo
@dircategory dateutils
@direntry
* dateutils: (dateutils).	Command line tools to fiddle with dates.
@end direntry

This manual documents the dateutils package.

Copyright @copyright{} 2011 Sebastian Freundt.

Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License,
Version 1.3 or any later version published by the Free Software
Foundation; with no Invariant Sections, with no Front-Cover Texts,
and with no Back-Cover Texts.  A copy of the license is included
in the section entitled "GNU Free Documentation License".
@end ifinfo
@c
@setchapternewpage odd
@settitle dateutils User's Manual
@c
@titlepage
@sp 6
@center @titlefont{dateutils User's Manual}
@sp 4
@sp 1
@sp 1
@center September 2011
@sp 5
@center Sebastian Freundt
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2011 Sebastian Freundt.

Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License,
Version 1.3 or any later version published by the Free Software
Foundation; with no Invariant Sections, with no Front-Cover Texts,
and with no Back-Cover Texts.  A copy of the license is included
in the section entitled "GNU Free Documentation License".
@end titlepage
@page

@node Top
@top dateutils

dateutils are a bunch of tools that revolve around fiddling with dates
and times in the command line with a strong focus on use cases that
arise when dealing with large amounts of financial data.

@menu
* Introduction::        Motivation, background, etc.
* Calendars::           Calendar concepts and format specs
* strptime::            Command line version of the C function
* dconv::                Convert dates between calendars
* dadd::                Add durations to dates
* ddiff::               Compute durations from dates
* dgrep::               Find date matches in input stream
* dseq::                Generate sequences of dates
* dtest::               Compare dates
* tconv::                Convert time representations
* tadd::                Add durations to times
* tdiff::               Compute durations between times
* tgrep::               Find time matches in input stream
* tseq::                Generate sequences of times
* ttest::               Compare times
@end menu


@node Introduction
@chapter Introduction

The dateutils package is an attempt to provide a comprehensive set of
command line tools that behave intuitively, support a similar variety of
inputs, allow for normalised output and, most importantly, cover nearly
all tasks that arise whilst dealing with huge amounts of dates and
unusual calendars.

In day to day business, the authors have run across a plethora of
approaches to tackle seemingly simple problems.  When the command line
is a necessity most of these involve perl or awk, which suffer from bad
maintainability simply because those tools weren't made to process dates
and times in particular, and for the same reason those approaches are
anything but fast.

And conversely, good maintainability and fast processing is often seen
in integrated systems, such as R or database solutions but they come at
a price: little flexibility.  It's very uncommon to import billions of
dates into a database just to compare if they are greater than or equal
to a given date.  Besides, most of the time those billions of dates come
from external sources and have to be brought into shape before or whilst
importing them into an integrated system.

@include format.texi


@node Calendars
@chapter Calendars

All of the dateutils command line apps are built around a library,
date-core.  The textual representation of dates is converted to an
internal one first, then the date operation is performed and the
internal representation in the end is converted back to a textual
one.

While many of the tools that provide date arithmetic or conversions
employ a single standard internal representation (mostly days since a
reference date, or seconds since the epoch), the date-core library
provides a variety of calendars, each suitable for one or more
specific tasks.

Usually it's the tools' task to find out which calendar is the best
for the task at hand, but to use the library directly we give an
overview of the supported calendars here along with some of their
properties.

@section ymd, aka gregorian

This is the `ordinary' calendar, holding a year, a month and the day
of the month.  Years are subdivided into 12 months, months are
subdivided into 28 to 31 days.

The canonical input and output format is @code{%Y-%m-%d}.

@section ymcw

This is a calendric system used at some security exchanges, it holds a
year, a month, a weekday and the count of the weekday within the
month.  This holds dates like the third Thursday in March 2011.  Years
are subdivided into months as in the ymd calendar, months consist of
at least 4 and up to 5 weeks and weeks are subdivided into weekdays,
Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday.

The canonical input and output format is @code{%Y-%m-%c-%w}.

@section daisy

This is one of the most common calendric systems, it counts the days
since (we originally went for daysi, short for days since, but after
the 100th spelling mistake, because daisy is so much more natural, we
decided to stick with daisy) a given reference date.  In the Julian
calendar this was the founding of Rome, in many database systems this
is the 1st Jan 1, or other convenient dates like the 1st Jan 1970 or
1st Jan 1900.

The dateutils reference day (at the moment) is the 31st Dec 1916, or
equivalently the Naught-th of Jan 1917.  This may look like an
arbitrary date but it has some interesting properties:
- it is a Sunday, so weekday computation is easy as it is a mod 7
  operation only
- the year is 1 mod 4, so the number of leap years between 1917 and
  another year Y is simply Y div 4.

Actually any date that suffices these properties is fine but 1917 is
the first after 1900, and dates <= 1900 that have different leap year
rules so cannot be as easily used as our reference date.

The daisy calendar has no notion of years or months.

The daisy calendar has no associated input or output format.  This is
due to its nature that the reference date is arbitrary.  Outlook: As
soon as Julian dates are supported, daisy will use its in/out format
specs.

@section bizda

This calendric system is actually a whole tribe of calendars, in its
canonical form this tracks the number of business days after last
month's ultimo.  Where business day means any non-weekend day.  Years
are divided into 12 months, each of which consists of 20 to 23
business days.

The canonical input and output format is @code{%Y-%m-%db}, where
@code{b} is a suffix modifier meaning business days since last month's
ultimo.  Similarly, @code{%Y-%m-%dB} stands for the business days until
this month's ultimo.


@include strptime.texi
@include dconv.texi
@include dadd.texi
@include ddiff.texi
@include dgrep.texi
@include dseq.texi
@include dtest.texi
@include tconv.texi
@include tadd.texi
@include tdiff.texi
@include tgrep.texi
@include tseq.texi
@include ttest.texi

@summarycontents
@contents
@bye


@c Remember to delete these lines before creating the info file.
@iftex
@bindingoffset = 0.5in
@parindent = 0pt
@end iftex
